{"version":3,"sources":["app-component/weather.component.jsx","app-component/form.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["minmaxTemp","min","max","className","Weather","props","city","weatherIcon","temp_celsius","temp_min","temp_max","description","Form","error","onSubmit","loadweather","type","clasName","name","autoComplete","placeholder","App","getWeather","e","a","preventDefault","target","elements","value","country","fetch","api_call","json","response","console","log","setState","sys","celsius","calCelsius","main","temp","weather","get_WeatherIcon","id","state","undefined","icon","Thunderstorm","drizzle","Rain","Snow","Atmosphere","Clear","Clouds","Math","floor","icons","rangeID","this","Drizzle","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9f422909.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Weather = (props) => {\r\n    return (\r\n        <div className=\"container text-light\">\r\n            <div className=\"cards pt-4\">\r\n                <h1>{props.city}</h1>\r\n                <h5 className=\"py-4\">\r\n                    <i className={`wi ${props.weatherIcon} display-1`} />\r\n                </h5>\r\n                {props.temp_celsius? (\r\n                    <h1 className=\"py-2\">{props.temp_celsius}&deg;</h1>\r\n                ): null}\r\n                \r\n\r\n                {minmaxTemp(props.temp_min, props.temp_max)} \r\n                <h4 className=\"py-3\">{props.description}</h4>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nfunction minmaxTemp(min, max) {\r\n\r\n    if(min && max) {\r\n        return (\r\n            <h3>\r\n                <span className=\"px-4\">{min}&deg;</span>\r\n                <span className=\"px-4\">{max}&deg;</span>\r\n            </h3>\r\n);\r\n}\r\n}\r\n\r\nexport default Weather;","import React from 'react';\r\nimport './form.style.css';\r\n\r\nconst Form = props =>{\r\nreturn(\r\n<div className=\"container\">\r\n<div>{props.error ? error() : null}</div>\r\n<form onSubmit={props.loadweather}>\r\n<div className=\"row\">\r\n        <div className=\"col-md-3 offset-md-2\">\r\n            <input type=\"text\" \r\n            clasName=\"form-control\" \r\n            name=\"city\" \r\n            autoComplete=\"off\"\r\n            placeholder=\"City\" />\r\n        </div>\r\n        <div className=\"col-md-3\">\r\n        <input \r\n        type=\"text\" \r\n        clasName=\"form-control\" \r\n        name=\"country\" \r\n        autoComplete=\"off\"\r\n        placeholder=\"Country\" />\r\n        </div>\r\n        <div className=\"col-md-3 py-2\">\r\n            <button \r\n            className=\"btn btn-warning mt-md-0 text-md-left\">Get Weather</button>\r\n        </div>\r\n    </div>\r\n</form>\r\n    \r\n</div>\r\n);\r\n};\r\n\r\n\r\nfunction error(){\r\n    return(\r\n<div className=\"alert alert-danger mx-5 role=alert\">\r\n    Please Enter and City\r\n</div>\r\n    );\r\n}\r\nexport default Form;","import React from 'react';\nimport './App.css';\nimport 'weather-icons/css/weather-icons.css';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Weather from './app-component/weather.component';\nimport Form from './app-component/form.component';\n\nconst API_key = \"f227bba2575e3be61140540ba66de841\";\n\n//API call to this link -api.openweathermap.org/data/2.5/weather?q=London&appid={API key}\nclass App extends React.Component{\n  constructor(){\n    super();\n    this.state = {\n      city: undefined,\n      country: undefined,\n      icon: undefined,\n      main: undefined,\n      celsius: undefined,\n      temp_max: undefined,\n      temp_min: undefined,\n      description: \"\",\n      error: false\n    };\n    \n\n    this.weatherIcon = {\n      Thunderstorm: \"wi-thunderstorm\",\n      drizzle: \"wi-sleet\",\n      Rain: \"wi-storm-showers\",\n      Snow: \"wi-snow\",\n      Atmosphere: \"wi-fog\",\n      Clear: \"wi-day-sunny\",\n      Clouds: \"wi-day-fog\"\n    };\n  }\n\n    calCelsius(temp){\n      let cell = Math.floor(temp - 273.15);\n      return cell;\n    }\n  \n    get_WeatherIcon(icons, rangeID){\n      switch(true){\n        case rangeID >= 200 && rangeID <= 232:\n          this.setState({icon: this.weatherIcon.Thunderstorm})\n          break;\n\n          case rangeID >= 300 && rangeID <= 321:\n          this.setState({icon: this.weatherIcon.Drizzle})\n          break;\n\n          case rangeID >= 500 && rangeID <= 531:\n          this.setState({icon: this.weatherIcon.Rain})\n          break;\n\n          case rangeID >= 600 && rangeID <= 622:\n          this.setState({icon: this.weatherIcon.Snow})\n          break;\n\n          case rangeID >= 701 && rangeID <= 781:\n          this.setState({icon: this.weatherIcon.Atmosphere})\n          break;\n          case rangeID === 800:\n          this.setState({icon: this.weatherIcon.Clear})\n          break;\n          case rangeID >= 801 && rangeID <= 804:\n          this.setState({icon: this.weatherIcon.Clouds})\n          break;\n          default:\n            this.setState({icon: this.weatherIcon.Clouds}) \n      }\n    }\n\n  getWeather = async(e) => {\n\n    e.preventDefault();\n\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n\n    if(city && country){\n      const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_key}`\n    \n    );\n    \n    \n    const response = await api_call.json();\n    console.log(response);\n\n    this.setState({\n      city: `${response.name}, ${response.sys.country}`,\n      celsius: this.calCelsius(response.main.temp),\n      temp_max: this.calCelsius(response.main.temp_max),\n      temp_min: this.calCelsius(response.main.temp_min),\n      description: response.weather[0].description,\n      error: false\n    });\n    \n    this.get_WeatherIcon(this.weatherIcon, response.weather[0].id);\n  }else {\n    this.setState({error: true});\n  }\n  };\n\n  render(){\n  return(\n<div className=\"App\">\n<Form loadweather = {this.getWeather} error={this.state.error}/>\n <Weather city={this.state.city}\n country={this.state.country}\n  temp_celsius={this.state.celsius}\n  temp_max={this.state.temp_max}\n  temp_min={this.state.temp_min}\n  description={this.state.description}\n  weatherIcon = {this.state.icon}\n />\n</div>\n  );\n  }\n}\n \nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}